basePath: /api
definitions:
  model.Error:
    properties:
      error: {}
    type: object
  model.Forum:
    properties:
      posts:
        type: integer
      slug:
        type: string
      threads:
        type: integer
      title:
        type: string
      user:
        type: string
    type: object
  model.ForumCreateModel:
    properties:
      slug:
        type: string
      title:
        type: string
      user:
        type: string
    type: object
  model.Post:
    properties:
      author:
        type: string
      created:
        type: string
      forum:
        type: string
      id:
        type: integer
      isEdited:
        type: boolean
      message:
        type: string
      parent:
        type: integer
      thread:
        type: integer
    type: object
  model.PostFull:
    properties:
      author:
        $ref: '#/definitions/model.User'
      forum:
        $ref: '#/definitions/model.Forum'
      post:
        $ref: '#/definitions/model.Post'
      thread:
        $ref: '#/definitions/model.Thread'
    type: object
  model.PostUpdate:
    properties:
      message:
        type: string
    type: object
  model.Response:
    properties:
      body: {}
    type: object
  model.Status:
    properties:
      forum:
        type: integer
      post:
        type: integer
      thread:
        type: integer
      user:
        type: integer
    type: object
  model.Thread:
    properties:
      author:
        type: string
      created:
        type: string
      forum:
        type: string
      id:
        type: integer
      message:
        type: string
      slug:
        type: string
      title:
        type: string
      votes:
        type: integer
    type: object
  model.ThreadCreateModel:
    properties:
      author:
        type: string
      created:
        type: string
      message:
        type: string
      title:
        type: string
    type: object
  model.ThreadUpdate:
    properties:
      message:
        type: string
      title:
        type: string
    type: object
  model.User:
    properties:
      about:
        type: string
      email:
        type: string
      fullname:
        type: string
      nickname:
        type: string
    type: object
  model.Vote:
    properties:
      nickname:
        type: string
      voice:
        type: integer
    type: object
host: 127.0.0.1:5000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: DB project server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: DB project API
  version: "1.0"
paths:
  /forum/{slug}/create:
    post:
      consumes:
      - application/json
      description: creates thread
      operationId: CreateThread
      parameters:
      - description: slug of forum
        in: path
        name: slug
        required: true
        type: string
      - description: Thread params
        in: body
        name: thread
        required: true
        schema:
          $ref: '#/definitions/model.ThreadCreateModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Thread'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.Thread'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: creates thread
      tags:
      - Forum
  /forum/{slug}/details:
    get:
      consumes:
      - application/json
      description: Gets forum info
      operationId: GetForumInfo
      parameters:
      - description: slug of forum
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Forum'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Gets forum info
      tags:
      - Forum
  /forum/{slug}/threads:
    get:
      consumes:
      - application/json
      description: Gets forum threads
      operationId: GetForumThreads
      parameters:
      - description: slug of forum
        in: path
        name: slug
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: since
        in: query
        name: since
        type: string
      - description: desc
        in: query
        name: desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Thread'
            type: array
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Gets forum threads
      tags:
      - Forum
  /forum/{slug}/users:
    get:
      consumes:
      - application/json
      description: Gets forum users
      operationId: GetForumUsers
      parameters:
      - description: slug of forum
        in: path
        name: slug
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: since
        in: query
        name: since
        type: string
      - description: desc
        in: query
        name: desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Forum'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Gets forum users
      tags:
      - Forum
  /forum/create:
    post:
      consumes:
      - application/json
      description: Creates Forum
      operationId: CreateForum
      parameters:
      - description: Forum params
        in: body
        name: forum
        required: true
        schema:
          $ref: '#/definitions/model.ForumCreateModel'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad request - Problem with the request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Creates Forum
      tags:
      - Forum
  /post/{id}/details:
    get:
      consumes:
      - application/json
      description: Gets post by id
      operationId: GetPostById
      parameters:
      - description: id of post
        in: path
        name: id
        required: true
        type: string
      - description: related
        in: query
        name: related
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostFull'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Gets post by id
      tags:
      - Post
    post:
      consumes:
      - application/json
      description: Edits post by id
      operationId: UpdatePost
      parameters:
      - description: id of post
        in: path
        name: id
        required: true
        type: string
      - description: PostUpdate params
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.PostUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostFull'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Editss post by id
      tags:
      - Post
  /service/clear:
    post:
      consumes:
      - application/json
      description: Clears Service info
      operationId: ServiceClear
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Clears Service info
      tags:
      - Service
  /service/status:
    get:
      consumes:
      - application/json
      description: Gets Service info
      operationId: GetServiceStatus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Status'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Gets Service info
      tags:
      - Service
  /thread/{slug_or_id}/create:
    post:
      consumes:
      - application/json
      description: Creates Posts
      operationId: CreatePosts
      parameters:
      - description: slug or id
        in: path
        name: slug_or_id
        required: true
        type: string
      - description: Posts params
        in: body
        name: posts
        required: true
        schema:
          items:
            $ref: '#/definitions/model.Post'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad request - Problem with the request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Creates Posts
      tags:
      - Thread
  /thread/{slug_or_id}/details:
    get:
      consumes:
      - application/json
      description: Gets thread info
      operationId: GetThreadInfo
      parameters:
      - description: slug or id of thread
        in: path
        name: slug_or_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Thread'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Gets thread info
      tags:
      - Thread
    post:
      consumes:
      - application/json
      description: Updates thread info
      operationId: UpdateThreadInfo
      parameters:
      - description: slug or id of thread
        in: path
        name: slug_or_id
        required: true
        type: string
      - description: ThreadUpdate params
        in: body
        name: threadUpdate
        required: true
        schema:
          $ref: '#/definitions/model.ThreadUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Thread'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Updates thread info
      tags:
      - Thread
  /thread/{slug_or_id}/posts:
    get:
      consumes:
      - application/json
      description: GetThreadPosts
      operationId: GetThreadPosts
      parameters:
      - description: slug or id of thread
        in: path
        name: slug_or_id
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: since
        in: query
        name: since
        type: string
      - description: sort
        in: query
        name: sort
        type: string
      - description: desc
        in: query
        name: desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Thread'
            type: array
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: GetThreadPosts
      tags:
      - Thread
  /thread/{slug_or_id}/vote:
    post:
      consumes:
      - application/json
      description: VoteForThread
      operationId: VoteForThread
      parameters:
      - description: slug or id of thread
        in: path
        name: slug_or_id
        required: true
        type: string
      - description: vote params
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/model.Vote'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Thread'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: VoteForThread
      tags:
      - Thread
  /user/{nickname}/create:
    post:
      consumes:
      - application/json
      description: Creates User
      operationId: CreateUser
      parameters:
      - description: nickname of user
        in: path
        name: nickname
        required: true
        type: string
      - description: User params
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad request - Problem with the request
          schema:
            $ref: '#/definitions/model.Error'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Creates User
      tags:
      - User
  /user/{nickname}/profile:
    get:
      consumes:
      - application/json
      description: Gets Users profile
      operationId: GetProfile
      parameters:
      - description: nickname of user
        in: path
        name: nickname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Gets Users profile
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Changes Users profile
      operationId: PostProfile
      parameters:
      - description: nickname of user
        in: path
        name: nickname
        required: true
        type: string
      - description: User params
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not found - Requested entity is not found in database
          schema:
            $ref: '#/definitions/model.Error'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error - Request is valid but operation failed
            at server side
          schema:
            $ref: '#/definitions/model.Error'
      summary: Changes Users profile
      tags:
      - User
swagger: "2.0"
